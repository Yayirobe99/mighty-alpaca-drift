-- Añadir campo de manager a la tabla de perfiles
ALTER TABLE public.profiles
ADD COLUMN manager_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL;

-- Crear tabla para las políticas de ausencia
CREATE TABLE public.time_off_policies (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_name TEXT NOT NULL UNIQUE,
  description TEXT,
  days_per_year NUMERIC NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.time_off_policies ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Las políticas son visibles para usuarios autenticados." ON public.time_off_policies FOR SELECT USING (auth.role() = 'authenticated');

-- Crear tabla para las solicitudes de ausencia
CREATE TABLE public.time_off_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  policy_id BIGINT NOT NULL REFERENCES public.time_off_policies(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  total_days NUMERIC NOT NULL,
  reason TEXT,
  status TEXT NOT NULL DEFAULT 'solicitado' CHECK (status IN ('solicitado', 'aprobado', 'rechazado')),
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.time_off_requests ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Los empleados pueden gestionar sus propias solicitudes." ON public.time_off_requests FOR ALL USING (auth.uid() = employee_id);

-- Crear tabla para el balance de días de los usuarios
CREATE TABLE public.user_time_off_balances (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  policy_id BIGINT NOT NULL REFERENCES public.time_off_policies(id) ON DELETE CASCADE,
  days_available NUMERIC NOT NULL,
  UNIQUE (employee_id, policy_id)
);
ALTER TABLE public.user_time_off_balances ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Los empleados pueden ver su propio balance." ON public.user_time_off_balances FOR SELECT USING (auth.uid() = employee_id);